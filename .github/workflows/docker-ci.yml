# This is a basic workflow to help you get started with Actions

name: docker-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    tags:
      - 'v*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Grant execute permission for mvnw
        run: chmod +x mvnw
      
      # Runs a single command using the runners shell
      - name: Package app with Maven
        run: |
          ./mvnw clean install
          mv target/container-ci-demo-0.0.1-SNAPSHOT.jar target/container-ci-demo.jar
      
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run tests with Maven
        run: mvn -B test --file pom.xml
      - uses: docker/setup-buildx-action@v1
        name: Set up Docker Buildx
      - name: Build and push
        id: gen_tags
        run: |
          if [[ $GITHUB_REF == 'refs/tags/'* ]]; then
            TAGS='["user/image:latest","user/image:'${GITHUB_REF/refs\/tags\//}'"]'
          else
            TAGS='["user/image:latest"]'
          fi
          echo '::set-output name=tags::'$TAGS

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        needs: gen_tags
        with:
          context: .
          push: true
          tags: ${{ fromJson(steps.gen_tags.outputs.tags) }}
